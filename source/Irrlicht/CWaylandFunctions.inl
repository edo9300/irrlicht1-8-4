#ifdef WAYLAND_EGL_CORE
WAYLAND_FUNC(wl_egl_window_destroy, void, wl_egl_window* egl_window)
WAYLAND_FUNC(wl_egl_window_create, wl_egl_window*, wl_surface* surface, int width, int height)
WAYLAND_FUNC(wl_egl_window_resize, void, wl_egl_window* egl_window, int width, int height, int dx, int dy)
#endif
#ifdef WAYLAND_CURSOR
WAYLAND_FUNC(wl_cursor_theme_destroy, void, wl_cursor_theme* theme)
WAYLAND_FUNC(wl_cursor_theme_load, wl_cursor_theme*, const char* name, int size, struct wl_shm* shm)
WAYLAND_FUNC(wl_cursor_theme_get_cursor, wl_cursor*, wl_cursor_theme* theme, const char* name)
WAYLAND_FUNC(wl_cursor_image_get_buffer, wl_buffer*, wl_cursor_image* image)
#endif
#ifdef XKB_COMMMON
WAYLAND_FUNC(xkb_compose_state_feed, xkb_compose_feed_result, xkb_compose_state* state, xkb_keysym_t keysym)
WAYLAND_FUNC(xkb_compose_state_get_one_sym, xkb_keysym_t, xkb_compose_state* state)
WAYLAND_FUNC(xkb_compose_state_get_status, xkb_compose_status, xkb_compose_state* state)
WAYLAND_FUNC(xkb_compose_state_new, xkb_compose_state*, xkb_compose_table* table, xkb_compose_state_flags flags)
WAYLAND_FUNC(xkb_compose_state_unref, void, xkb_compose_state* state)
WAYLAND_FUNC(xkb_compose_table_new_from_locale, xkb_compose_table*, xkb_context* context, const char* locale, xkb_compose_compile_flags flags)
WAYLAND_FUNC(xkb_compose_table_unref, void, xkb_compose_table* table)
WAYLAND_FUNC(xkb_context_new, xkb_context*, xkb_context_flags flags)
WAYLAND_FUNC(xkb_context_unref, void, xkb_context* context)
WAYLAND_FUNC(xkb_keymap_key_repeats, int, xkb_keymap* keymap, xkb_keycode_t key)
WAYLAND_FUNC(xkb_keymap_mod_get_index, xkb_mod_index_t, xkb_keymap* keymap, const char* name)
WAYLAND_FUNC(xkb_keymap_new_from_string, xkb_keymap*, xkb_context* context, const char* string, xkb_keymap_format format, xkb_keymap_compile_flags flags)
WAYLAND_FUNC(xkb_keymap_unref, void, xkb_keymap* keymap)
WAYLAND_FUNC(xkb_keysym_to_utf32, uint32_t, xkb_keysym_t keysym)
WAYLAND_FUNC(xkb_state_key_get_syms, int, xkb_state* state, xkb_keycode_t key, const xkb_keysym_t** syms_out)
WAYLAND_FUNC(xkb_state_new, xkb_state*, xkb_keymap* keymap)
WAYLAND_FUNC(xkb_state_serialize_mods, xkb_mod_mask_t, xkb_state* state, xkb_state_component components)
WAYLAND_FUNC(xkb_state_unref, void, xkb_state* state)
WAYLAND_FUNC(xkb_state_update_mask, xkb_state_component, xkb_state* state, xkb_mod_mask_t depressed_mods, xkb_mod_mask_t latched_mods, xkb_mod_mask_t locked_mods, xkb_layout_index_t depressed_layout, xkb_layout_index_t latched_layout, xkb_layout_index_t locked_layout)
WAYLAND_FUNC(xkb_state_update_key, xkb_state_component, xkb_state* state, xkb_keycode_t key, xkb_key_direction direction)
#endif
#ifdef WAYLAND_CLIENT
#ifndef ONLY_PROXY
WAYLAND_FUNC(wl_display_connect, wl_display*, const char* name)
WAYLAND_FUNC(wl_display_disconnect, void, wl_display* display)
WAYLAND_FUNC(wl_display_dispatch, int, wl_display* display)
WAYLAND_FUNC(wl_display_dispatch_pending, int, wl_display* display)
WAYLAND_FUNC(wl_display_flush, int, wl_display* display)
WAYLAND_FUNC(wl_display_roundtrip, int, wl_display* display)
#endif
WAYLAND_FUNC(wl_proxy_add_listener, int, struct wl_proxy* proxy, void (**implementation)(void), void* data)
WAYLAND_FUNC(wl_proxy_destroy, void, struct wl_proxy* proxy)
WAYLAND_FUNC(wl_proxy_get_version, uint32_t, struct wl_proxy* proxy)
WAYLAND_FUNC(wl_proxy_marshal, void, struct wl_proxy* p, uint32_t opcode, ...)
WAYLAND_FUNC(wl_proxy_marshal_constructor, struct wl_proxy*, struct wl_proxy* proxy, uint32_t opcode, const struct wl_interface* interface, ...)
WAYLAND_FUNC(wl_proxy_marshal_constructor_versioned, struct wl_proxy*, struct wl_proxy* proxy, uint32_t opcode, const struct wl_interface* interface, uint32_t version, ...)
WAYLAND_FUNC(wl_proxy_set_user_data, void, struct wl_proxy* proxy, void* user_data)
#if WAYLAND_VERSION_MINOR >= 20
WAYLAND_FUNC(wl_proxy_marshal_flags, struct wl_proxy*, struct wl_proxy *proxy, uint32_t opcode, const struct wl_interface *interfac, uint32_t version, uint32_t flags, ...)
WAYLAND_FUNC(wl_proxy_marshal_array_flags, struct wl_proxy*, struct wl_proxy *proxy, uint32_t opcode, const struct wl_interface *interface, uint32_t version,  uint32_t flags, union wl_argument *args)
#endif
WAYLAND_INTERFACE(wl_seat_interface)
WAYLAND_INTERFACE(wl_surface_interface)
WAYLAND_INTERFACE(wl_shm_pool_interface)
WAYLAND_INTERFACE(wl_buffer_interface)
WAYLAND_INTERFACE(wl_registry_interface)
WAYLAND_INTERFACE(wl_shell_surface_interface)
WAYLAND_INTERFACE(wl_region_interface)
WAYLAND_INTERFACE(wl_pointer_interface)
WAYLAND_INTERFACE(wl_keyboard_interface)
WAYLAND_INTERFACE(wl_compositor_interface)
WAYLAND_INTERFACE(wl_output_interface)
WAYLAND_INTERFACE(wl_shell_interface)
WAYLAND_INTERFACE(wl_shm_interface)
WAYLAND_INTERFACE(wl_data_device_interface)
WAYLAND_INTERFACE(wl_data_source_interface)
WAYLAND_INTERFACE(wl_data_offer_interface)
WAYLAND_INTERFACE(wl_data_device_manager_interface)
WAYLAND_INTERFACE(wl_callback_interface)
WAYLAND_INTERFACE(wl_touch_interface)
#endif
